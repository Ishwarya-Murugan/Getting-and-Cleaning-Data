head(EDU)
?merge
names(GDP) <- c("CountryCode","Ranking","Economy", "GDPValue")
GDP
head(EDU)
names(EDU)
GDP
EDu
EDU
EDU$Special.Notes
?gsub
grep("Fiscal year endEDU",$Special.Notes)
grep("Fiscal year endEDU",EDU$Special.Notes)
EDU$Special.Notes
grep("Fiscal year end",EDU$Special.Notes)
EDU[grep("Fiscal year end",EDU$Special.Notes)]
EDU[grep("Fiscal year end",EDU$Special.Notes),]
EDu_fyear <- EDU[grep("Fiscal year end",EDU$Special.Notes),]
EDU_fyear <- EDU[grep("Fiscal year end",EDU$Special.Notes),]
EDU_fyear$Special.Notes
merge(GDP, EDU_fyear, by= "CountryCode")
GDP_EDU[grep("FIscal year end: June", EDU_fyear$Special.Notes),]
GDP_EDU <- merge(GDP, EDU_fyear, by= "CountryCode")
GDP_EDU[grep("FIscal year end: June", EDU_fyear$Special.Notes),]
GDP_EDU[grep("FIscal year end: June", GDP_EDU$Special.Notes),]
EDU_fyear$Special.Notes
GDP_EDU[grep("Fiscal year end: June", GDP_EDU$Special.Notes),]
length(GDP_EDU[grep("Fiscal year end: June", GDP_EDU$Special.Notes),])
GDP_EDU[grep("Fiscal year end: June", GDP_EDU$Special.Notes),]
?length
dim(GDP_EDU[grep("Fiscal year end: June", GDP_EDU$Special.Notes),])
dim(GDP_EDU[grep("Fiscal year end: June", GDP_EDU$Special.Notes),])[1]
setwd("C:\\Users\\Ishwa\\Desktop\\DataScience\\R\\Getting and Cleaning Data")
head(Idaho_housing)
setwd("C:\\Users\\Ishwa\\Desktop\\DataScience\\R\\Getting and Cleaning Data")
# Read teh input file and explore the  data
Idaho_housing <- read.csv("Idaho housing data 2006.csv")
head(Idaho_housing)
# Split the names of the dataframe and get the 123 rd element
names_Id_hous<- names(Idaho_housing)
strsplit(names_Id_hous,"wgtp")[[123]]
# Load the GDP data, take care of the title , header lines, and the additional data at the bottome of the file
GDP_data <- read.csv("getdata_data_GDP.csv", header=FALSE, skip=5, sep=",",  nrows=190, colClasses = c("character", "character", "NULL", "character", "character", rep("NULL",5)))
names(GDP_data) <- c("CountryCode","Ranking","Economy", "GDPValue")
# View the rows in the loaded dataframe
head(GDP_data$GDPValue)
# Remove the , from the GDP value as well as the leading and trailing spaces
GDP_data$GDPValue<- str_trim(gsub(",","",GDP_data$GDPValue))
library(stringr)
# Remove the , from the GDP value as well as the leading and trailing spaces
GDP_data$GDPValue<- str_trim(gsub(",","",GDP_data$GDPValue))
# Convert the character value into numeric
value <- as.numeric(GDP_data$GDPValue)
# Find the mean fo the GDPvalue variable
mean(value, na.rm=TRUE)
library(swirl)
rm(list=ls())
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col='blue')
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm,col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=2)
abline(v=2,lw=2)
abline(v=2,lwd=2)
abline(v=12,lwd=2)
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
table(pollution$region)
reg<- table(pollution$region)
reg
barplot(reg, col='wheat',main= "Number of Counties in Each Region")
boxplot(pm25~region, data=pollution, col="red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
east<- hist(pollution$pm25[pollution$region=="east"])
east<- subset(pollution,region=="east")
head(east)
hist(east$pm25, col="green")
hist(subset(pollution,region=="west")$pm25, col='green')
with(pollution,plot(latitude, pm25))
abline(h=12, lwd=2)
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude,ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west<- subset(pollution,region=="west")
plot(west$latitude, west$pm25, title="Weat")
plot(west$latitude, west$pm25, title="West")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
?Devices
with(dataset(faithful), plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting))
title(main="old Faithful Geyser data")
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed,dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp~Income|region, data=state, layout=c(4,1))
xyplot(Life.Exp~Income|region, data=state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ,hwy, data=mpg)
head(airquality)
range(airquality$Ozone, rm.na=TRUE)
range(airquality$Ozone, na.rm =TRUE)
hist(airquality$Ozone)
table(airquality$Month)
dev.cur()
dev.off()
dev.cur()
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)", col.axis="blue", col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red", main = "Ozone and Wind in New York City")
title(main = "Ozone and Wind in New York City")
wiht(airquality, plot(Wind, Ozone))
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
par()
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main="WInd and Ozone in NYC" ")
''
""
title(main="WInd and Ozone in NYC")
title(main="Wind and Ozone in NYC")
may= subset(airquality, months==5)
may= subset(airquality, months=5)
may= subset(airquality, Months=5)
may<- subset(airquality, Months=5)
may<- subset(airquality, Months==5)
may<- subset(airquality, Month==5)
points(may$Wind, may$Ozone, col= "blue, pch =2)
""
"
points(may$Wind, may$Ozone, col= "blue", pch =2)
points(may$Wind, may$Ozone, col= "blue", pch =17)
notmay<- subset(airquality, Month!=5)
points(may$Wind, may$Ozone, col= "red", pch =27)
points(may$Wind, may$Ozone, col= "red", pch =8)
points(notmay$Wind, notmay$Ozone, col= "red", pch =8)
legend("topright", pch=c(17,8), col=c("blue", "red"), ("May", "Other Months"))
legend("topright", pch=c(17,8), col=c("blue", "red"), c("May", "Other Months"))
legend("topright", pch=c(17,8), col=c("blue", "red"), legend=c("May", "Other Months"))
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow(c(1,2)))
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R,airquality$Ozone, main = "Ozone and Solar Radiation")
Plot(airquality$Temp,airquality$Ozone, main= "Ozone and Temperature")
plot(airquality$Temp,airquality$Ozone, main= "Ozone and Temperature")
mtext("Ozone and Weather in New York City")
mtext("Ozone and Weather in New York City", outer = T)
mtext("Ozone and Weather in New York City", outer = TRUE)
head(hflights)
library(dplyr)
#install.packages("hflights")
library(hflights)
head(hflights)
hflights %>% group_by(UniqueCarrier) %>% summarize(frequency= sum(Cancelled, na.rm = T))
head(hflights)
hflights %>% group_by(Month)
hflights %>% filter(Origin == "IAH") %>% group_by(Month)
hflights %>% filter(Origin == "IAH") %>% group_by(Month) %>% summarise(average_delay = mean(ArrDelay) )
hflights %>% filter(Origin == "IAH") %>% group_by(Month) %>% summarise(average_delay = mean(ArrDelay, na.rm=TRUE) )
hflights %>% filter(Origin == "IAH") %>% group_by(Month) %>% summarise(Flight_Count_Mon = n(), Average_Delay = mean(ArrDelay, na.rm=TRUE),  )
dim(hflights)
hflights %>% filter(Origin == "IAH") %>% group_by(Month) %>% summarise(Flight_Count_Mon = n(), Average_Delay = mean(ArrDelay, na.rm=TRUE),  )
head(mtcars)
mtcars
first = mtcars[(1:10) ,]
first
second = mtcars[(6:15) ,]
second
first
second
intersect(first, second)
union(first, second)
setdiff()
setdiff(first, second)
union_all(first, second)
maths = c(60:70)
science = c(70:80)
english = c(45, 65, 75, 85, 95,70:75 )
maths = (60:70)
science = (70:80)
english = c(45, 65, 75, 85, 95,70:75 )
class_list = list(maths, science, english)
class_list
lapply(class_list, mean())
?lapply ()
lapply(class_list, mean())
lapply(class_list, mean
lapply(class_list, mean)
lapply(class_list, mean)
?sum
maths = c(60, 56, 76, 80)
science = c(70,80, 45, 67)
english = c(45, 65, 75, 85 )
class_list = list(maths, science, english)
sapply(class_list, sum)
?matrix
m = matrix(sample(1:100, 50), nrow= 10, ncol =5)
m
?apply
apply(m,2,mean)
head(mtcars)
tapply(mtcars, INDEX= list(mtcars$am, mtcars$cyl), mean )
tapply(mtcars, list(mtcars$am, mtcars$cyl), mean )
?tapply(vector, index, function)
?tapply
tapply(mtcars$mpg, list(mtcars$am, mtcars$cyl), mean )
?mapply
x = 1:5
x
class(x)
y = 6:10
?multiply
?mul
mapply (function(x, y){ x*y}, x, y)
library(tidyr)
Player <- c("Sachin Tendulkar", "Sourav Ganguly", "VVS Laxman", "Rahul Dravid")
Y2010 <- c(48.8, 40.22, 51.02, 53.34)
Y2011 <- c(53.7, 41.9, 50.8, 59.44)
Y2012 <- c(60.0, 52.39, 61.2, 61.44)
paverage.df <- data.frame(Player,Y2010,Y2011,Y2012)
print(paverage.df)
pavg_gather <- gather(paverage.df, year, pavg, Y2010:Y2012)
pavg_gather
library(stringr)
?str_locate
str_locate(x, "little")
x = "hop a little, jump a little"
str_locate(x, "little")
str_locate_all(x, "little")
x = "hop a little, jump a little"
?str_detect
str_detect(x, "z")
str_detect(x, "h")
str_detect(x, "z")
str_detect(x, "jump")
str_detect(x, "z")
?str_extract
str_extract(s, "NA")
s = "TRUE   NA  TRUE  NA   NA   NA  FALSE"
str_extract(s, "NA")
str_extract_all(s, "NA")
str_length(s)
str_to_lower(s)
str_to_upper(s)
y = c("alpha", "gama", "duo", "uno", "beta")
str_order(y)
?str_pad
str_pad(y, side="both", pad = "%%%%")
str_pad(y, side="both", pad = "%", width= 4)
str_pad(y, side="both", pad = "%", width= 13)
str_trim(z)
str_trim(z)
z=c(" A", " B", " C")
z=c(" A", " B", " C")
str_trim(z)
getwd()
actv_labl <- read.table("activity_labels.txt")
setwd("C:\Users\Ishwa\Desktop\DataScience\R\Getting and Cleaning Data\getdata_projectfiles_UCI HAR Dataset\UCI HAR Dataset")
setwd("C:\\Users\\Ishwa\\Desktop\\DataScience\\R\\Getting and Cleaning Data\\getdata_projectfiles_UCI HAR Dataset\\UCI HAR Dataset")
actv_labl <- read.table("activity_labels.txt")
class(actv_labl)
dim(actv_labl)
head(actv_labl)
actv_labl <- read.table("activity_labels.txt", names = c("class_labl", "actv_name"))
actv_labl <- read.table("activity_labels.txt", colnames = c("class_labl", "actv_name"))
?read.table
actv_labl <- read.table("activity_labels.txt", col.names = c("class_labl", "actv_name"))
?read.table
class(actv_labl)
dim(actv_labl)
head(actv_labl)
x_test <- read.table("\\test\\X_test.txt")
x_test <- read.table("test\\X_test.txt")
head(x_test)
feature_name <- read.table("features.txt")
head(feature_name)
feature_name <- read.table("features.txt" col.names= c("feature_idx", "feature_var"))
feature_name <- read.table("features.txt", col.names= c("feature_idx", "feature_var"))
head(feature_name)
library(stringr)
actv_labl <- read.table("activity_labels.txt", col.names = c("class", "name"))
class(actv_labl)
dim(actv_labl)
head(actv_labl)
x_test <- read.table("test\\X_test.txt")
head(x_test)
feature <- read.table("features.txt", col.names= c("idx", "name"))
head(feature)
library(stringr)
str_match(feature$name, "mean")
str_extract(feature$name, "mean")
str_extract(feature$name, "mean | std")
str_extract(feature$name, "[mean | std]")
str_extract(feature$name, "[mean, std]")
grep(feature$name, "mean")
grep("mean",feature$name,ignore.case = True )
grep("mean",feature$name,ignore.case = TRUE )
grep("mean",feature$name,ignore.case = TRUE, value = True )
grep("mean",feature$name,ignore.case = TRUE, value = TRUE)
grep("mean|std",feature$name,ignore.case = TRUE, value = TRUE)
grep("mean|std",feature$name,ignore.case = TRUE, value = TRUE)
grep("mean()|std()",feature$name,ignore.case = TRUE, value = TRUE)
grep("mean()|std()",feature$name,ignore.case = TRUE, value = TRUE)
str_extract(feature$name, "[mean, std]")
grep("mean()|std()",feature$name,ignore.case = TRUE, value = TRUE)
grep("(mean())|std()",feature$name,ignore.case = TRUE, value = TRUE)
grep("mean|std",feature$name,ignore.case = TRUE, value = TRUE)
cols_with_mean_std <- grep("mean|std|!angel",feature$name,ignore.case = TRUE, value = TRUE)
cols_with_mean_std <-
grep("mean|std|!angel",feature$name,ignore.case = TRUE, value = TRUE)
cols_with_mean_std <-
grep("mean|std|!angel",feature$name,ignore.case = TRUE, value = TRUE)
grep("mean|std|!angel",feature$name,ignore.case = TRUE, value = TRUE)
grep("(mean|std) &!angel",feature$name,ignore.case = TRUE, value = TRUE)
grep("(mean|std)",feature$name,ignore.case = TRUE, value = TRUE)
grep("(mean())|(std())",feature$name,ignore.case = TRUE, value = TRUE)
grep("(mean()?)|(std())",feature$name,ignore.case = TRUE, value = TRUE)
cols_with_mean_std <- grep("(mean())|(std())",feature$name,ignore.case = TRUE, value = TRUE)
cols_with_mean_std
grep("^angle", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep("!^angle", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep("^!angle", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep("^angle", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep("!(^angle)", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep("^(!angle)", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep("^(!(angle))", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep("^angle)", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("^angle", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("!(^angle)", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("?!(^angle)", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("!(^angle)?", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
cols_with_mean_std <- grep("(mean())|(std())",feature$name,ignore.case = TRUE, value = TRUE)
cols_with_mean_std
grep ("!(^angle)?", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("!(^angle)", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("^((?!angel).)*$", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("^((?!angle).)", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("^((?!angle))", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("/^((?!angle))", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("^((?!angle))", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("^(?!angle)", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("^angle", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("^!angle", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("^(!angle)", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("^(?!angle)", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("^(!angle)", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("^(!angle).", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("^(?!angle).", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("^(!angle)?.", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
str_extract(cols_with_mean_std, "^(!angle)")
str_extract(cols_with_mean_std, "^angle")
str_extract(cols_with_mean_std, "^(?!angle)")
str_extract(cols_with_mean_std, "^(?!angle).")
str_extract(cols_with_mean_std, "^(?!angle).*")
str_remove(cols_with_mean_std, "^angle")
str_remove(cols_with_mean_std, "^angle.")
str_remove(cols_with_mean_std, "^angle.")
str_remove(cols_with_mean_std, "^angle.*")
str_match(cols_with_mean_std, "^(?!angle).*")
grep ("^(?!angle).*", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("^(!angle).*", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("^(?!angle).*", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("^(\?!angle).*", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("^(?!angle).*", cols_with_mean_std,ignore.case = TRUE, value = TRUE)
grep ("^(?!angle).*", cols_with_mean_std,ignore.case = TRUE, value = TRUE, perl=T)
grep ("^(?!angle).*", cols_with_mean_std,ignore.case = TRUE, value = TRUE, perl=TRUE)
cols_with_mean_std <- grep("mean|std",feature$name,ignore.case = TRUE, value = TRUE)
grep ("^(?!angle).*", cols_with_mean_std,ignore.case = TRUE, value = TRUE, perl=TRUE)
subject_test <- read.table("subject_test.txt", col.names= c("id"))
subject_test <- read.table("test\\subject_test.txt", col.names= c("id"))
head(subject_test)
subject_test <- read.table("test\\subject_test.txt", col.names= c("subject_id"))
head(subject_test)
actv_labl <- read.table("activity_labels.txt", col.names = c("class", "name"))
head(actv_labl)
y_test <- read.table("test\\y_test.txt", col.names= c("y_label"))
head(y_test)
lapply(y_test, function(l){ actv_labl$name[actv_labl$class==l]})
actv_labl$name[actv_labl$class==1]
?lapply
head(y_test)
lapply(y_test$y_label, function(l){ actv_labl$name[actv_labl$class==l]})
y_test$y_label<- lapply(y_test$y_label, function(l){ actv_labl$name[actv_labl$class==l]})
head(y_test)
y_test$y_label<- lapply(y_test$y_label, function(l){ actv_labl$name[actv_labl$class==l]})
head(y_test)
lapply(y_test$y_label, function(l){ actv_labl$name[actv_labl$class==l]})
y_test$y_label<- sapply(y_test$y_label, function(l){ actv_labl$name[actv_labl$class==l]})
head(y_test)
sapply(y_test$y_label, function(l){ actv_labl$name[actv_labl$class==l]})
y_test <- read.table("test\\y_test.txt", col.names= c("y_label"))
head(y_test)
y_test$y_label<- sapply(y_test$y_label, function(label){ actv_labl$name[actv_labl$class==label]})
head(y_test)
head(x_test)
cols_with_mean_std <- grep ("^(?!angle).*", cols_with_mean_std,ignore.case = TRUE, value = TRUE, perl=TRUE)
summary(actv_labl)
str(actv_labl)
str(x_test)
str(feature)
str(y_test)
cols_with_mean_std
str(feature)
x_test <- read.table("test\\X_test.txt", col.names=feature$name)
str(x_test)
head(y_test)
head(x_test)
library(dplyr)
x_test %>% select(cols_with_mean_std)
names(x_test)
cols_with_mean_std
feature$name
names(x_test)<- feature$name
names(x_test)
x_test %>% select(cols_with_mean_std)
cols_with_mean_std <- grep("mean|std",feature$name,ignore.case = TRUE, value = TRUE)
cols_with_mean_std <- grep ("^(?!angle).*", cols_with_mean_std,ignore.case = TRUE, value = TRUE, perl=TRUE)
cols_with_mean_std
names(x_test)
x_test %>% select(cols_with_mean_std)
head(x_test)
cols_with_mean_std
x_test %>% select(c("fBodyAccMag-meanFreq()","fBodyBodyAccJerkMag-mean()","fBodyBodyAccJerkMag-std()","fBodyBodyAccJerkMag-meanFreq()",
"fBodyBodyGyroMag-mean()","fBodyBodyGyroMag-std()"))
x_test %>% select(c("fBodyAccMag-meanFreq()","fBodyBodyAccJerkMag-mean()"))
x_test %>% select(fBodyAccMag-meanFreq,fBodyBodyAccJerkMag-mean())
x_test %>% select(fBodyAccMag-meanFreq(),fBodyBodyAccJerkMag-mean())
names(x_test)
x_test %>% select(fBodyAccMag-meanFreq())
table(name(x_test))
table(names(x_test))
xtest["fBodyGyro-bandsEnergy()-33,48"]
x_test["fBodyGyro-bandsEnergy()-33,48"]
names(x_test)
x_test[1:10,c(461,475, 489)]
head(x_test[,cols_with_mean_std])
x_test_mean_std <- x_test[,cols_with_mean_std])
x_test_mean_std <- x_test[,cols_with_mean_std]
sum(x_test_mean_std)
summary(x_test_mean_std)
str(x_test_mean_std)
?cbind
test_data <- cbind(subject_test$subject_id,y_test$y_label,x_test_mean_std)
str(test_data)
str(test_data)
colnames(test_data)[1] <- "subject_id"
colnames(test_data)[2] <- "activity"
str(test_data)
subject_train <- read.table("train\\subject_train.txt", col.names= c("subject_id"))
head(subject_train)
str(subject_train)
x_train <- read.table("train\\X_train.txt")
names(x_train)<- feature$name
str(x_train)
y_train <- read.table("train\\y_train.txt", col.names= c("y_label"))
y_train$y_label<- sapply(y_train$y_label, function(label){ actv_labl$name[actv_labl$class==label]})
str(y_train)
x_train_mean_std <- x_train[,cols_with_mean_std]
str(x_train_mean_std)
train_data <- cbind(subject_train$subject_id,y_train$y_label,x_train_mean_std)
colnames(train_data)[1] <- "subject_id"
colnames(train_data)[2] <- "activity"
str(train_data)
tidy_data <- rbind(train_data, test_data)
str(tidy_data)
write.table(tidy_data, row.name=FALSE)
?write_table
?write.table
